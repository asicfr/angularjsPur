
// ${beanClass.name.toLowerCase()} module add into global module (see app.js)
var app${beanClass.name.toLowerCase()} = angular.module('app.${beanClass.name.toLowerCase()}', ['app.${beanClass.name.toLowerCase()}.services'], function(${DOLLAR}routeProvider, ${DOLLAR}locationProvider) {

	// ${beanClass.name.toLowerCase()} list
	${DOLLAR}routeProvider.when('/${beanClass.name.toLowerCase()}', {
		templateUrl: 'gen/pages/${beanClass.name.toLowerCase()}/list.html'
	});

	// ${beanClass.name.toLowerCase()} create
	${DOLLAR}routeProvider.when('/${beanClass.name.toLowerCase()}/create', {
		templateUrl: 'gen/pages/${beanClass.name.toLowerCase()}/create.html'
	});

	// ${beanClass.name.toLowerCase()} edit
	${DOLLAR}routeProvider.when('/${beanClass.name.toLowerCase()}/:id', {
		templateUrl: 'gen/pages/${beanClass.name.toLowerCase()}/edit.html'
	});

});


// -------------------- List Ctrl -------------------------------------------------------------------
app${beanClass.name.toLowerCase()}.controller('${beanClass.name}ListCtrl', ['${DOLLAR}scope', '${DOLLAR}location', '${DOLLAR}routeParams', '${DOLLAR}rootScope', 'Api${beanClass.name}', 'ApiStorage', function (${DOLLAR}scope, ${DOLLAR}location, ${DOLLAR}routeParams, ${DOLLAR}rootScope, Api${beanClass.name}, ApiStorage) {
	${DOLLAR}rootScope.logMe("${beanClass.name}ListCtrl");
	var self = this;
	
	var listTmp = Api${beanClass.name}.search();
	${DOLLAR}scope.${beanClass.name.toLowerCase()}s = listTmp.datapage;
	${DOLLAR}rootScope.logMe("search end");

	// new ${beanClass.name} call
	${DOLLAR}scope.openCreate${beanClass.name}Page = function () {
		${DOLLAR}rootScope.logMe("openCreate${beanClass.name}Page");
		${DOLLAR}location.path("/${beanClass.name.toLowerCase()}/create");
	};

}]);


// -------------------- Detail Ctrl -------------------------------------------------------------------
app${beanClass.name.toLowerCase()}.controller('${beanClass.name}DetailCtrl', ['${DOLLAR}scope', '${DOLLAR}location', '${DOLLAR}routeParams', '${DOLLAR}rootScope', 'Api${beanClass.name}', 'ApiStructure', 
#foreach( $link in $beanClass.selectedLinks )
#if ( $link.isCardinalityOneToOne() || $link.isCardinalityManyToOne() )
		'Api${link.targetEntity}',
#else 
## TODO many-to-many / one-to-many
#end
#end
		function (${DOLLAR}scope, ${DOLLAR}location, ${DOLLAR}routeParams, ${DOLLAR}rootScope, Api${beanClass.name}, ApiStructure
#foreach( $link in $beanClass.selectedLinks )
#if ( $link.isCardinalityOneToOne() || $link.isCardinalityManyToOne() )
		, Api${link.targetEntity}
#else 
## TODO many-to-many / one-to-many
#end
#end
		) {
	${DOLLAR}rootScope.logMe("${beanClass.name}DetailCtrl");
	${DOLLAR}scope.idCurrent = ${DOLLAR}routeParams.id;
	
	${DOLLAR}rootScope.logMe("get ${beanClass.name.toLowerCase()} ");
	${DOLLAR}scope.one${beanClass.name.toLowerCase()} = Api${beanClass.name}.get(${DOLLAR}scope.idCurrent);
	
	if (${DOLLAR}scope.one${beanClass.name.toLowerCase()} === undefined) {
		${DOLLAR}rootScope.showError("An error has occurred !");
	}
	
	// ${beanClass.name} update
	${DOLLAR}scope.update${beanClass.name} = function () {
		${DOLLAR}rootScope.logMe("update${beanClass.name}");
		if (Api${beanClass.name}.update(${DOLLAR}scope.idCurrent, ${DOLLAR}scope.one${beanClass.name.toLowerCase()})) {
			${DOLLAR}rootScope.showInfo("The ${beanClass.name.toLowerCase()} has been successfully updated");
		} else {
			${DOLLAR}rootScope.showError("An error has occurred !");
		}
	};

	// ${beanClass.name} remove
	${DOLLAR}scope.remove${beanClass.name} = function () {
		${DOLLAR}rootScope.logMe("remove${beanClass.name}");
		if (Api${beanClass.name}.remove(${DOLLAR}scope.idCurrent)) {
			${DOLLAR}rootScope.showInfo("The ${beanClass.name.toLowerCase()} has been successfully removed");
			${DOLLAR}location.path("/${beanClass.name.toLowerCase()}");
		} else {
			${DOLLAR}rootScope.showError("An error has occurred !");
		}
	};

	// Return to list
	${DOLLAR}scope.openList${beanClass.name}Page = function () {
		${DOLLAR}rootScope.logMe("openList${beanClass.name}Page");
		${DOLLAR}location.path("/${beanClass.name.toLowerCase()}");
	};

## links .........................................
#foreach( $link in $beanClass.selectedLinks )
#if ( $link.isCardinalityOneToOne() || $link.isCardinalityManyToOne() )
	// ------ Directive configuration for ${link.javaName} ------ 
    ${DOLLAR}scope.${link.javaName}_myparams = {};
    ${DOLLAR}scope.${link.javaName}_myparams.pageSize = 5;	
    ${DOLLAR}scope.${link.javaName}_myparams.paginated = true;
    ${DOLLAR}scope.${link.javaName}_myparams.key = ApiStructure.getStructureKey("${link.targetEntity.toLowerCase()}");
	${DOLLAR}scope.${link.javaName}_myparams.detail = ApiStructure.getStructureDetail("${link.targetEntity.toLowerCase()}");
	${DOLLAR}scope.${link.javaName}_myparams.columns = ApiStructure.getStructureColumns("${link.targetEntity.toLowerCase()}");
	${DOLLAR}scope.${link.javaName}_myparams.getlistcallback = function(pageindex, filtre) {
        return Api${link.targetEntity}.search(${DOLLAR}scope.${link.javaName}_myparams.pageSize, pageindex, filtre);
    };
	${DOLLAR}scope.${link.javaName}_myparams.getdetailcallback = function(key) {
		return Api${link.targetEntity}.get(key);
    };
	${DOLLAR}scope.${link.javaName}_myparams.onclickcallback = function(onerecord) {
        // alert(onerecord.name);
    };

#else 
## TODO many-to-many / one-to-many
#end
#end
}]);


// -------------------- Create Ctrl -------------------------------------------------------------------
app${beanClass.name.toLowerCase()}.controller('${beanClass.name}CreateCtrl', ['${DOLLAR}scope', '${DOLLAR}location', '${DOLLAR}routeParams', '${DOLLAR}rootScope', 'Api${beanClass.name}', 'ApiStructure', 
#foreach( $link in $beanClass.selectedLinks )
#if ( $link.isCardinalityOneToOne() || $link.isCardinalityManyToOne() )
		'Api${link.targetEntity}',
#else 
## TODO many-to-many / one-to-many
#end
#end
		function (${DOLLAR}scope, ${DOLLAR}location, ${DOLLAR}routeParams, ${DOLLAR}rootScope, Api${beanClass.name}, ApiStructure
#foreach( $link in $beanClass.selectedLinks )
#if ( $link.isCardinalityOneToOne() || $link.isCardinalityManyToOne() )
		, Api${link.targetEntity}
#else 
## TODO many-to-many / one-to-many
#end
#end
		) {
	${DOLLAR}rootScope.logMe("${beanClass.name}CreateCtrl");
	${DOLLAR}scope.one${beanClass.name.toLowerCase()} = {};
	
	// ${beanClass.name} save
	${DOLLAR}scope.save${beanClass.name} = function () {
		${DOLLAR}rootScope.logMe("save${beanClass.name}");
		if (Api${beanClass.name}.create(${DOLLAR}scope.one${beanClass.name.toLowerCase()})) {
			${DOLLAR}rootScope.showInfo("The ${beanClass.name.toLowerCase()} has been successfully created");
			${DOLLAR}location.path("/${beanClass.name.toLowerCase()}");
		} else {
			${DOLLAR}rootScope.showError("An error has occurred !");
		}
	};

	// Return to list
	${DOLLAR}scope.openList${beanClass.name}Page = function () {
		${DOLLAR}rootScope.logMe("openList${beanClass.name}Page");
		${DOLLAR}location.path("/${beanClass.name.toLowerCase()}");
	};

## links .........................................
#foreach( $link in $beanClass.selectedLinks )
#if ( $link.isCardinalityOneToOne() || $link.isCardinalityManyToOne() )
	// ------ Directive configuration for ${link.javaName} ------ 
    ${DOLLAR}scope.${link.javaName}_myparams = {};
    ${DOLLAR}scope.${link.javaName}_myparams.pageSize = 5;	
    ${DOLLAR}scope.${link.javaName}_myparams.paginated = true;
    ${DOLLAR}scope.${link.javaName}_myparams.key = ApiStructure.getStructureKey("${link.targetEntity.toLowerCase()}");
	${DOLLAR}scope.${link.javaName}_myparams.detail = ApiStructure.getStructureDetail("${link.targetEntity.toLowerCase()}");
	${DOLLAR}scope.${link.javaName}_myparams.columns = ApiStructure.getStructureColumns("${link.targetEntity.toLowerCase()}");
	${DOLLAR}scope.${link.javaName}_myparams.getlistcallback = function(pageindex, filtre) {
        return Api${link.targetEntity}.search(${DOLLAR}scope.${link.javaName}_myparams.pageSize, pageindex, filtre);
    };
	${DOLLAR}scope.${link.javaName}_myparams.getdetailcallback = function(key) {
		return Api${link.targetEntity}.get(key);
    };
	${DOLLAR}scope.${link.javaName}_myparams.onclickcallback = function(onerecord) {
        // alert(onerecord.name);
    };

#else 
## TODO many-to-many / one-to-many
#end
#end
}]);
